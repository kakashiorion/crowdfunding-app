datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

//TODO: Implement upload profile pic - phase 2
model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  hashedPassword       String
  salt                 String
  resetToken           String?
  resetTokenExpiresAt  DateTime?
  profilePicURL        String?
  lastActive           DateTime             @default(now()) //TODO: When the user interacted with the platform last - phase 2
  mobile               String? //For future use
  otp                  String? //For future use
  otpExpiresAt         DateTime? //For future use
  webAuthnChallenge    String?              @unique //For future use
  credentials          UserCredential[] //For future use
  type                 UserType             @default(GUEST)
  investor             Investor?
  startup              Startup?
  isOnboarded          Boolean              @default(false)
  likedOnboarding      Boolean?
  offerRoomMessages    RoomGroupMessage[]   @relation("RoomGroupMessageSender")
  negotitionMessages   NegotiationMessage[] @relation("NegotiationMessageSender")
  directMessages       DirectMessage[]      @relation("DMSender")
  directConversations  DirectConversation[] @relation("DM")
  posts                Post[]               @relation("Poster")
  comments             Comment[]            @relation("Commenter")
  likedPosts           Post[]               @relation("UserLikesPost")
  savedPosts           Post[]               @relation("UserSavedPost")
  likedComments        Comment[]            @relation("UserLikesComment")
  connections          Connection[]         @relation("Connection")
  requestedConnections Connection[]         @relation("ConnectionRequester")
  followedBy           User[]               @relation("UserFollows")
  following            User[]               @relation("UserFollows")
  blocking             User[]               @relation("UserBlocked")
  blockedBy            User[]               @relation("UserBlocked")
  messageVisibility    VisibilityLevel      @default(PUBLIC)
  activityVisbility    VisibilityLevel      @default(PUBLIC)
  profileVisbility     VisibilityLevel      @default(PUBLIC)
  notificationLevel    NotificationLevel    @default(HIGH)
  prefersTheme         UITheme              @default(SYSTEM)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

enum UITheme {
  SYSTEM
  LIGHT
  DARK
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

enum UserType {
  INVESTOR
  STARTUP
  ADMIN
  GUEST
}

model Lead {
  id        Int      @id @default(autoincrement())
  email     String
  gToken    String
  type      UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LandingContact {
  id        Int      @id @default(autoincrement())
  email     String
  query     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Connection {
  id          Int              @id @default(autoincrement())
  users       User[]           @relation("Connection")
  status      ConnectionStatus @default(PENDING)
  requester   User             @relation("ConnectionRequester", fields: [requesterID], references: [id])
  requesterID Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Investor {
  id                    Int                 @id
  user                  User                @relation(fields: [id], references: [id])
  name                  String
  dateOfBirth           DateTime?
  locationID            Int
  location              Location            @relation("InvestorLocation", fields: [locationID], references: [id])
  linkedInURL           String?
  websiteURL            String?
  eduBG                 EducationBG
  yearsOfWorkEx         SizeRange
  numberOfCompanies     SizeRange
  workedInSectors       Sector[]
  investorExp           InvestorExperience?
  investorObjective     InvestorObjective?
  participatingInOffers OfferRoom[]         @relation("Participant")
  waitingInRoomQueues   OfferRoom[]         @relation("Waiting")
  kickedFromOffers      OfferRoom[]         @relation("Kicked")
  negotiatingOffers     NegotiationTable[]  @relation("Negotiator")
  dealsJoined           Deal[]              @relation("DealJoiners")
  askedQuestions        OfferQuestion[]     @relation("OfferQuestions")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}

model Location {
  id        Int        @id @default(autoincrement())
  state     String
  city      String?
  lat       Float?
  long      Float?
  startups  Startup[]  @relation("StartupLocation")
  investors Investor[] @relation("InvestorLocation")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([state, city])
}

enum EducationBG {
  NONE
  HIGH_SCHOOL
  BACHELORS
  MASTERS
  PHD
}

model InvestorExperience {
  id                 Int            @id
  investor           Investor       @relation(fields: [id], references: [id])
  workedInStartups   SizeRange
  foundedStartups    SizeRange
  investedStartups   SizeRange
  investedStages     FundingStage[]
  investedAmountLacs AmountRange
  successfulExits    SizeRange
  returnsReceived    ReturnsRange[]
  investedSectors    Sector[]
  investorLevel      InvestorLevel
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum SizeRange {
  NONE
  ONE_TO_THREE
  THREE_TO_TEN
  TEN_TO_TWENTY
  MORE_THAN_TWENTY
}

enum ReturnsRange {
  BREAKEVEN
  TWO
  THREE
  FIVE
  TEN
  TWENTY
  FIFTY
  HUNDRED
}

enum InvestorLevel {
  NOVICE
  INTERMEDIATE
  EXPERIENCED
  PROFESSIONAL
  SEASONED
}

enum FundingStage {
  PRE_SEED
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D
  SERIES_E
  LATER
}

enum AmountRange {
  NONE
  LESS_THAN_ONE_LAC
  ONE_TO_FIVE_LACS
  FIVE_TO_TWENTY_LACS
  TWENTY_LACS_TO_ONE_CRORE
  MORE_THAN_1_CRORE
}

model InvestorObjective {
  id                        Int                    @id
  investor                  Investor               @relation(fields: [id], references: [id])
  preferredAmountToInvest   AmountRange
  preferredFundingStages    FundingStage[]
  preferredStartupTeamSizes StartupTeamSize[]
  preferredTimelines        TimelineRange[]
  riskApetite               RiskApetite
  preferredSectors          Sector[]
  preferredLocations        Int[] //from Location table
  platformGoal              InvestorPlatformGoal[]
  referSource               ReferSource[]
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
}

enum TimelineRange {
  LESS_THAN_SIX_MONTHS
  SIX_TO_TWELVE_MONTHS
  ONE_TO_TWO_YEARS
  TWO_TO_FIVE_YEARS
  FIVE_TO_TEN_YEARS
  MORE_THAN_TEN_YEARS
}

enum RiskApetite {
  LOW
  MEDIUM
  HIGH
}

enum StartupTeamSize {
  ONE
  BETWEEN_1_AND_10
  BETWEEN_10_AND_50
  BETWEEN_50_AND_200
  BETWEEN_200_AND_1000
  OVER_1000
}

enum InvestorPlatformGoal {
  INVESTING
  CONNECTING
  LEARNING
  EXPLORING
  CONSULTING
  RESEARCHING
  OTHER
}

enum ReferSource {
  WORD_OF_MOUTH
  SOCIAL_MEDIA
  BROWSING
  REFERRAL
  ADVERTISEMENT
  OTHER
}

enum VisibilityLevel {
  PRIVATE
  CONNECTIONS
  FOLLOWERS
  PUBLIC
}

enum NotificationLevel {
  NONE
  ONLY_CRITICAL
  MEDIUM
  HIGH
}

model Startup {
  id                Int                @id
  user              User               @relation(fields: [id], references: [id])
  name              String
  writeUp           String
  dateIncorporated  DateTime
  linkedInURL       String?
  websiteURL        String?
  locationID        Int
  location          Location           @relation("StartupLocation", fields: [locationID], references: [id])
  sectorCategoryID  Int
  sectorCategory    SectorCategory     @relation("StartupSectorCategory", fields: [sectorCategoryID], references: [id])
  startupBackground StartupBackground?
  startupBusiness   StartupBusiness?
  startupMarket     StartupMarket?
  startupFinancials StartupFinancials?
  startupObjective  StartupObjective?
  offers            Offer[]            @relation("OffersByStartup")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model SectorCategory {
  id        Int       @id @default(autoincrement())
  sector    Sector
  category  String
  startup   Startup[] @relation("StartupSectorCategory")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([sector, category])
}

enum Sector {
  EDUCATION
  HEALTHCARE
  BANKING_AND_FINANCE
  ENERGY
  RETAIL
  REAL_ESTATE
  INFORMATION_TECHNOLOGY
  SCIENCE_AND_TECHNOLOGY
  AGRICULTURE
  MANUFACTURING
  MEDIA_AND_ENTERTAINMENT
  TELECOMMUNICATIONS
  TRANSPORTATION
  FOOD_AND_TOURISM
  OTHER
}

model StartupBackground {
  id              Int             @id
  startup         Startup         @relation(fields: [id], references: [id])
  valueProp       String?
  idea            String?
  whyThis         String?
  foundedBefore   SizeRange
  mission         String?
  vision          String?
  coreValues      String[]
  startupTeamSize StartupTeamSize
  keyPeople       KeyPeople[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model KeyPeople {
  id                  Int               @id @default(autoincrement())
  startupBackground   StartupBackground @relation(fields: [startupBackgroundID], references: [id])
  startupBackgroundID Int
  name                String
  role                String
  writeup             String?
  linkedInURL         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model StartupBusiness {
  id                Int              @id
  startup           Startup          @relation(fields: [id], references: [id])
  numberUsers       UserRange
  numberCities      SizeRange
  distributionType  DistributionType
  partners          String[]
  customers         String[]
  workedWell        String[]
  challenges        String[]
  couldImprove      String[]
  currentActivities String[]
  hasOnlineBusiness OnlineBusiness
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum OnlineBusiness {
  YES
  SETTING_UP
  PLANNED
  NO
}

enum UserRange {
  LESS_THAN_100
  BETWEEN_100_AND_1000
  BETWEEN_1000_AND_10000
  BETWEEN_10000_AND_1_LAC
  BETWEEN_1_LAC_AND_10_LACS
  BETWEEEN_10_LACS_AND_1_CRORE
  MORE_THAN_1_CRORE
}

enum DistributionType {
  B2B
  B2C
  BOTH
  OTHER
}

model StartupMarket {
  id               Int              @id
  startup          Startup          @relation(fields: [id], references: [id])
  revenueStreams   RevenueStreams[]
  costHeads        CostHeads[]
  shortTermPlan    ShortTermPlan
  marketSizeInCr   MarketSize
  marketGrowthRate GrowthRate
  trends           String[]
  opporunities     String[]
  threats          String[]
  competitors      String[]
  xFactor          String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

enum MarketSize {
  LESS_THAN_10_CR
  BETWEEN_10_AND_100_CR
  BETWEEN_100_AND_1000_CR
  BETWEEN_1000_AND_10000_CR
  BETWEEN_10000_AND_1_LAC_CR
  MORE_THAN_1_LAC_CR
}

enum GrowthRate {
  LESS_THAN_5
  BETWEEN_5_TO_10
  BETWEEN_10_TO_20
  BETWEEN_20_TO_50
  BETWEEN_50_TO_100
  MORE_THAN_100
}

enum RevenueStreams {
  SELLING_GOODS_OR_SERVICES
  RENTAL_OR_LEASING
  ADS_OR_SPONSORS
  COMMISSION_FEE
  SUBSCRIPTION_OR_LICENSING
  DONATIONS
  PAY_PER_USE
  OTHER
}

enum CostHeads {
  MATERIAL
  WAGES
  RENT
  INTEREST
  EQUIPMENT
  MARKETING
  ADMIN
  OTHER
}

enum ShortTermPlan {
  EXPAND_GEOGRAPHICALLY
  GO_FOR_IPO
  HIRE_AND_EXPAND_TEAM
  IMPROVE_PRODUCT_OR_SERVICE
  BUILD_CUSTOMER_BASE
  OTHER
}

model StartupFinancials {
  id                  Int                @id
  startup             Startup            @relation(fields: [id], references: [id])
  latestFundingStage  FundingStage
  latestValuationInCr Float?
  latestCapTable      CapTable[]
  fundraisingRounds   FundraisingRound[]
  currentRatio        DecimalRange
  debtEquityRatio     DecimalRange
  revenueLastFY       RevenueRange
  revenueGrowthRate   GrowthRate
  margin              Margin
  cashRunway          TimelineRange
  plansForUsingCash   String[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

enum DecimalRange {
  LESS_THAN_HALF
  BETWEEN_HALF_AND_ONE
  BETWEEN_ONE_AND_TWO
  MORE_THAN_TWO
}

enum RevenueRange {
  LESS_THAN_10_LACS
  BETWEEN_10_TO_20_LACS
  BETWEEN_20_TO_50_LACS
  BETWEEN_50_TO_100_LACS
  BETWEEN_1_TO_10_CR
  BETWEEN_10_TO_50_CR
  BETWEEN_50_TO_100_CR
  MORE_THAN_100_CRORE
}

enum Margin {
  LOSS_OVER_50
  LOSS_BETWEEN_20_AND_50
  LOSS_LESS_THAN_20
  PROFIT_LESS_THAN_20
  PROFIT_BETWEEN_20_AND_50
  PROFIT_OVER_50
}

model FundraisingRound {
  id                  Int               @id @default(autoincrement())
  startupFinancials   StartupFinancials @relation(fields: [startupFinancialsID], references: [id])
  startupFinancialsID Int
  fundingStage        FundingStage
  capitalRaisedInCr   Float
  valuationInCr       Float
  keyInvestors        String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model CapTable {
  id                  Int               @id @default(autoincrement())
  startupFinancials   StartupFinancials @relation(fields: [startupFinancialsID], references: [id])
  startupFinancialsID Int
  shareholderName     String
  equityShare         Float
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model StartupObjective {
  id                      Int                   @id
  startup                 Startup               @relation(fields: [id], references: [id])
  preferredInvestorLevels InvestorLevel[]
  preferredLocations      Int[] //from Location table
  expectedTimeline        TimelineRange
  promisingReturns        ReturnsRange
  platformGoal            StartupPlatformGoal[]
  referSource             ReferSource[]
  pitchDeckURL            String?
  demoURL                 String[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

enum StartupPlatformGoal {
  RAISING_FUNDS
  EXPLORING
  CONNECTING
  GETTING_ADVICE
  OTHER
}

model Offer {
  id                Int          @id @default(autoincrement())
  startupID         Int
  startup           Startup      @relation("OffersByStartup", fields: [startupID], references: [id])
  capitalTargetLacs Float
  equityBeingIssued Float
  minTicketSizeLacs Float        @default(1.0)
  maxTicketSizeLacs Float
  fundingStage      FundingStage
  maxInvestors      Int
  willUseFundsFor   String[]
  needHelpWith      String[]
  offerRoom         OfferRoom?   @relation("OfferRoom")
  successfulDealers Deal[]       @relation("SuccessfulDeal")
  status            OfferStatus  @default(CREATED)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

enum OfferStatus {
  CREATED
  EXCEEDED
  DISCARDED
  CLOSED
}

//TODO: Implement other offer room features such as polling, bidding, etc. - phase 2
model OfferRoom {
  id                Int                @id
  offer             Offer              @relation("OfferRoom", fields: [id], references: [id])
  isPublic          Boolean            @default(true)
  passcode          String?
  roomGroupMessages RoomGroupMessage[] @relation("RoomGroupMessages")
  participants      Investor[]         @relation("Participant")
  waitingList       Investor[]         @relation("Waiting")
  kickedList        Investor[]         @relation("Kicked")
  negotiationTable  NegotiationTable?  @relation("NegotiationTable")
  questions         OfferQuestion[]    @relation("Questions")
  resourceLinks     String[]
  joinLimit         Int                @default(50)
  timelineDays      Int                @default(15)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model NegotiationTable {
  id                  Int                  @id
  offerRoom           OfferRoom            @relation("NegotiationTable", fields: [id], references: [id])
  negotiators         Investor[]           @relation("Negotiator")
  negotiationMessages NegotiationMessage[] @relation("NegotiationMessages")
  isHidden            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Deal {
  id                Int      @id @default(autoincrement())
  offerID           Int
  offer             Offer    @relation("SuccessfulDeal", fields: [offerID], references: [id])
  investorID        Int
  investor          Investor @relation("DealJoiners", fields: [investorID], references: [id])
  fundingAmountLacs Float
  isJoining         Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// model Bid {
//   id               Int           @id @default(autoincrement())
//   offer            Offer         @relation(fields: [offerID], references: [id])
//   offerID          Int
//   investor         Investor      @relation(fields: [investorID], references: [id])
//   investorID       Int
//   status           BidStatus     @default(CREATED)
//   rebid            Boolean       @default(false)
//   capitalAvailable Float
//   equityNeeded     Float
//   counterCapital   Float?
//   counterEquity    Float?
//   canHelpWith      String[]
//   questions        BidQuestion[]
//   createdAt        DateTime      @default(now())
//   updatedAt        DateTime      @updatedAt

//   @@unique([offerID, investorID]) //An investor can only bid once on an offer
// }

// enum BidStatus {
//   CREATED
//   COUNTER
//   ACCEPTED
//   DECLINED
// }

model OfferQuestion {
  id          Int       @id @default(autoincrement())
  offerRoom   OfferRoom @relation("Questions", fields: [offerRoomID], references: [id])
  offerRoomID Int
  asker       Investor  @relation("OfferQuestions", fields: [askerID], references: [id])
  askerID     Int
  question    String
  answered    Boolean   @default(false)
  answer      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id            Int             @id @default(autoincrement())
  poster        User            @relation("Poster", fields: [posterID], references: [id])
  posterID      Int
  comments      Comment[]
  likedByUsers  User[]          @relation("UserLikesPost")
  savedByUsers  User[]          @relation("UserSavedPost")
  title         String
  writeup       String?
  attachmentURL String?
  imageURL      String?
  visibility    VisibilityLevel @default(PUBLIC)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Comment {
  id           Int      @id @default(autoincrement())
  commenter    User     @relation("Commenter", fields: [commenterID], references: [id])
  commenterID  Int
  post         Post     @relation(fields: [postID], references: [id])
  postID       Int
  content      String
  likedByUsers User[]   @relation("UserLikesComment")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DirectConversation {
  id        Int             @id @default(autoincrement())
  users     User[]          @relation("DM")
  messages  DirectMessage[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model DirectMessage {
  id             Int                @id @default(autoincrement())
  conversation   DirectConversation @relation(fields: [conversationID], references: [id])
  conversationID Int
  sender         User               @relation("DMSender", fields: [senderID], references: [id])
  senderID       Int
  content        String
  attachmentURL  String?
  unread         Boolean            @default(true)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model RoomGroupMessage {
  id            Int       @id @default(autoincrement())
  offerRoom     OfferRoom @relation("RoomGroupMessages", fields: [offerRoomId], references: [id])
  offerRoomId   Int
  sender        User      @relation("RoomGroupMessageSender", fields: [senderID], references: [id])
  senderID      Int
  content       String
  attachmentURL String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model NegotiationMessage {
  id                 Int              @id @default(autoincrement())
  negotiationTable   NegotiationTable @relation("NegotiationMessages", fields: [negotiationTableID], references: [id])
  negotiationTableID Int
  sender             User             @relation("NegotiationMessageSender", fields: [senderID], references: [id])
  senderID           Int
  content            String
  attachmentURL      String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
